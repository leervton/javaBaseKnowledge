package JavaBasicKnowledge.sort;

/**
 * 冒泡排序算法【从首位通过两两左右位置比较，把最大的数慢慢过滤到最后的位置】
 * 3，2，7，6，8
 * 拿着第一个数字3和右边相邻的2进行比较，如果左边>右边，则交换两个元素的位置
 * 第一次交换位置：
 * 【2】，【3】，7，6，8
 * 继续拿着上次比较之后的结果中的右边较大的数字和其右边后续数字进行比较
 *
 * 应该注重的是左右位置进行比较，而不是其本身的元素
 */
public class BubbleSort {
    public static void main(String[] args) {
        //冒泡排序算法处理的数组对象
        int[] arr={9,2,7,10,6,0};

        //请对arr数组内的元素进行从小往大的排序
        //冒泡排序的核心是什么？
        //冒泡排序关注的是位置比较，而选择排序关注的是元素比较
        /**
         * 10，2，7，6，8
         * --------------------------------------
         * 第一次比较交换位置：
         * 【2】，【10】，7，6，8
         * 第二次比较交换位置：
         * 2，【7】，【10】，6，8
         * 第三次比较交换位置：
         * 2，7，【6】，【10】，8
         * 第四次比较交换位置：
         * 2，7，6，【8】，【10】
         * 输出最后一位的最大值：
         * 2，7，6，8
         * ---------------------------------------
         * 2，7，6，8
         * 第一次比较交换位置
         * 【2】，【7】，6，8
         * 第二次比较交换位置
         * 2，【6】，【7】，8
         * 第三次比较交换位置
         * 2，6，【7】，【8】
         * 输出最后一位最大值：
         * 2，6，7
         * ---------------------------------------
         * 2，6，7
         * 第一次比较交换位置
         * 【2】，【6】，7
         * 第二次比较交换位置
         * 2，【6】，【7】
         * 输出最大值：
         * 2，6
         * ---------------------------------------
         * 2，6
         * 第一次比较交换位置
         * 【2】，【6】
         * 输出最大值：
         * 2
         * ---------------------------------------
         * 2
         * 输出最大值：
         * ---------------------------------------
         * ------------例       2-------------------
         * ----------------------------------------
         * 参与比较的数据：9 8 10 7 6 0 11
         * 第1次循环：
         * 8 9 10 7 6 0 11 (第1次比较：交换)
         * 8 9 10 7 6 0 11 (第2次比较：不交换)
         * 8 9 7 10 6 0 11 (第3次比较：交换)
         * 8 9 7 6 10 0 11 (第4次比较：交换)
         * 8 9 7 6 0 10 11 (第5次比较：交换)
         * 8 9 7 6 0 10 11 (第6次比较：不交换)
         * 最终冒出的最大数据在右边：11
         *--------------------------------------
         * 参与比较的数据：8 9 7 6 0 10
         * 第2次循环：
         * 8 9 7 6 0 10（第1次比较：不交换）
         * 8 7 9 6 0 10（第2次比较：交换）
         * 8 7 6 9 0 10（第3次比较：交换）
         * 8 7 6 0 9 10（第4次比较：交换）
         * 8 7 6 0 9 10（第5次比较：不交换）
         *--------------------------------------
         * 参与比较的数据：8 7 6 0 9
         * 第3次循环：
         * 7 8 6 0 9（第1次比较：交换）
         * 7 6 8 0 9（第2次比较：交换）
         * 7 6 0 8 9（第3次比较：交换）
         * 7 6 0 8 9（第4次比较：不交换）
         *---------------------------------------
         * 参与比较的数据：7 6 0 8
         * 第4次循环：
         * 6 7 0 8（第1次比较：交换）
         * 6 0 7 8（第2次比较：交换）
         * 6 0 7 8（第3次比较：不交换）
         *---------------------------------------
         * 参与比较的数据：6 0 7
         * 第5次循环：
         * 0 6 7（第1次比较：交换）
         * 0 6 7（第2次比较：不交换）
         *---------------------------------------
         * 参与比较的数据：0 6
         * 第6次循环：
         * 0 6 （第1次比较：不交换）
         */
        //--------------------交换位置时修改元素----------------------------
        for(int i = 0;i<arr.length-1;i++){
            for(int k =0;k<arr.length-1-i;k++){
                int t;
                if(arr[k]>arr[k+1]){
                    t = arr[k];
                    arr[k]=arr[k+1];
                    arr[k+1] = t;
                }
            }
        }
        //---------------------交换位置时修改元素-------------------------
        for(int i=arr.length-1;i>0;i--){
            for(int j = 0;j <i;j++){
                if(arr[j]>arr[j+1]){
                    int temp;
                    temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        for(int i = 0; i<arr.length;i++){
            System.out.print(i+":"+arr[i]+"   ");
        }

    }
}
